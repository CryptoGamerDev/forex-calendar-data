name: Update and Clean Forex Calendar Data

on:
  schedule:
    - cron: '0 */2 * * *'  # Aktualizuj co 2 godziny
  workflow_dispatch:        # Ręczne uruchomienie

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}

      - name: Update and Clean Forex Data
        run: |
          # Pobierz surowe dane
          echo "Downloading raw data..."
          curl -s "https://nfs.faireconomy.media/ff_calendar_thisweek.csv" -o forex_data_raw.csv
          
          # Napraw znaki nowej linii i utwórz poprawny CSV
          echo "Cleaning and fixing CSV format..."
          {
            # Nagłówki dla MT5
            echo "Title,Country,Date,Time,Impact,Forecast,Previous"
            
            # Przepisz dane, usuwając problematyczne znaki i kolumnę URL
            tail -n +2 forex_data_raw.csv | while IFS= read -r line || [ -n "$line" ]; do
              # Usuń znaki \r i zastąp przecinki wewnątrz pól tymczasowym separatorem
              clean_line=$(echo "$line" | sed 's/\r//g' | sed 's/","/###TEMP###/g' | sed 's/,/ /g' | sed 's/###TEMP###/,/g')
              
              # Podziel na pola i wypisz tylko pierwsze 7
              IFS=',' read -r -a fields <<< "$clean_line"
              if [ ${#fields[@]} -ge 7 ]; then
                printf "%s," "${fields[0]}"
                printf "%s," "${fields[1]}"
                printf "%s," "${fields[2]}"
                printf "%s," "${fields[3]}"
                printf "%s," "${fields[4]}"
                printf "%s," "${fields[5]}"
                printf "%s\n" "${fields[6]}"
              fi
            done
          } > forex_data.csv
          
          # Alternatywnie: użyj Python do naprawy CSV (bardziej niezawodne)
          echo "Alternative cleaning with Python..."
          python3 -c "
import csv

with open('forex_data_raw.csv', 'r', newline='', encoding='utf-8') as f_in:
    with open('forex_data_cleaned_python.csv', 'w', newline='', encoding='utf-8') as f_out:
        reader = csv.reader(f_in)
        writer = csv.writer(f_out)
        
        # Write header
        writer.writerow(['Title', 'Country', 'Date', 'Time', 'Impact', 'Forecast', 'Previous'])
        
        # Skip original header and process rows
        next(reader, None)
        for row in reader:
            if len(row) >= 8:
                # Take only first 7 columns, remove any carriage returns
                cleaned_row = [field.replace('\r', '').replace('\n', ' ') for field in row[:7]]
                writer.writerow(cleaned_row)
          "
          
          # Użyj pliku utworzonego przez Python (bardziej niezawodny)
          mv forex_data_cleaned_python.csv forex_data.csv
          
          # Sprawdź rozmiary plików
          raw_lines=$(wc -l < forex_data_raw.csv)
          cleaned_lines=$(wc -l < forex_data.csv)
          echo "Raw data lines: $raw_lines"
          echo "Cleaned data lines: $cleaned_lines"
          
          # Sprawdź czy są jakieś problematyczne znaki
          echo "Checking for problematic characters..."
          if grep -q $'\r' forex_data.csv; then
            echo "WARNING: Still found carriage returns in cleaned file"
          else
            echo "SUCCESS: No carriage returns found in cleaned file"
          fi

      - name: Commit and push if changed
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add forex_data_raw.csv forex_data.csv
          git diff --quiet && git diff --staged --quiet || (git commit -m "Auto-update cleaned forex calendar data [$(date +%Y-%m-%d)]" && git push)
