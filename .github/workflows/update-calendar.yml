name: Update and Optimize Forex Calendar Data

on:
  schedule:
    - cron: '0 */2 * * *'  # Aktualizuj co 2 godziny
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual run'
        required: false
        default: 'Manual trigger'

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Download raw data using curl
        run: |
          echo "Downloading raw data..."
          curl -s -L "https://nfs.faireconomy.media/ff_calendar_thisweek.csv" -o forex_data_raw.csv
          
          if [ ! -s forex_data_raw.csv ]; then
            echo "ERROR: Failed to download data or file is empty"
            exit 1
          fi
          
          echo "✅ Successfully downloaded raw data. Lines: $(wc -l < forex_data_raw.csv)"

      - name: Optimize data for MQL5
        run: |
          echo "Optimizing data for MQL5 compatibility..."
          python3 << 'EOF'
          import csv
          import re
          from datetime import datetime

          # Wczytaj surowe dane
          try:
              with open('forex_data_raw.csv', 'r', encoding='utf-8') as f:
                  reader = csv.reader(f)
                  rows = list(reader)
          except Exception as e:
              print(f"ERROR: Failed to read raw data: {e}")
              exit(1)

          if len(rows) <= 1:
              print("ERROR: No data in raw file")
              exit(1)

          print(f"Processing {len(rows)-1} raw events...")

          # Przygotuj zoptymalizowany plik
          optimized_rows = []
          seen_events = set()
          
          # Mapowanie Impact na wartości numeryczne
          impact_to_importance = {
              'High': 3,
              'Medium': 2, 
              'Low': 1,
              'Holiday': 0
          }

          def convert_time_to_24h(time_str):
              """Konwertuj czas AM/PM na format 24-godzinny"""
              if not time_str or time_str.strip() == '':
                  return '00:00'
              
              time_str = time_str.lower().strip()
              
              match = re.match(r'(\d+):?(\d+)?\s*(am|pm)', time_str)
              if not match:
                  return '00:00'
                  
              hour = int(match.group(1))
              minute = match.group(2) if match.group(2) else '00'
              period = match.group(3)
              
              if period == 'pm' and hour != 12:
                  hour += 12
              elif period == 'am' and hour == 12:
                  hour = 0
                  
              return f"{hour:02d}:{minute}"

          def convert_date_format(date_str):
              """Konwertuj datę z MM-DD-YYYY na YYYY.MM.DD dla MQL5"""
              try:
                  if date_str and '-' in date_str:
                      month, day, year = date_str.split('-')
                      return f"{year}.{month}.{day}"
              except:
                  pass
              return date_str

          def clean_forecast_value(value):
              """Oczyść wartości forecast/previous dla MQL5"""
              if not value or value.strip() == '':
                  return '0'
              
              value = value.strip()
              
              # Usuń znaki specjalne jak | które powodują problemy
              if '|' in value:
                  value = value.split('|')[0]
              
              # Zamień procenty na liczby (usuwając %)
              if '%' in value:
                  value = value.replace('%', '')
              
              # Zamień litery na liczby (K=1000, M=1000000, B=1000000000)
              if 'K' in value:
                  value = str(float(value.replace('K', '')) * 1000)
              elif 'M' in value:
                  value = str(float(value.replace('M', '')) * 1000000)
              elif 'B' in value:
                  value = str(float(value.replace('B', '')) * 1000000000)
              
              # Usuń przecinki z liczb
              value = value.replace(',', '')
              
              return value

          # Nagłówek dla uproszczonego pliku
          optimized_rows.append(['Title', 'Country', 'Date', 'Time24h', 'Importance', 'Forecast', 'Previous'])

          # Przetwórz wiersze danych
          processed_count = 0
          for row in rows[1:]:
              if len(row) < 8:
                  continue
                  
              title, country, date, time, impact, forecast, previous = row[:7]
              
              # Sprawdź duplikaty
              event_key = f"{title}_{country}_{date}_{time}"
              if event_key in seen_events:
                  continue
              seen_events.add(event_key)
              
              # Konwertuj czas i datę
              time24h = convert_time_to_24h(time)
              date_mql5 = convert_date_format(date)
              
              # Oczyść wartości forecast/previous
              forecast_clean = clean_forecast_value(forecast)
              previous_clean = clean_forecast_value(previous)
              
              # Wartość numeryczna dla impact
              importance = str(impact_to_importance.get(impact, 0))
              
              optimized_rows.append([
                  title, 
                  country, 
                  date_mql5,
                  time24h, 
                  importance,
                  forecast_clean,
                  previous_clean
              ])
              processed_count += 1

          # Zapisz zoptymalizowany plik
          try:
              with open('forex_data_simple.csv', 'w', newline='', encoding='utf-8') as f:
                  writer = csv.writer(f)
                  writer.writerows(optimized_rows)
          except Exception as e:
              print(f"ERROR: Failed to write optimized file: {e}")
              exit(1)

          print(f"✅ SUCCESS: Optimized {processed_count} events for MQL5")
          
          # Statystyki
          high_impact = sum(1 for row in optimized_rows[1:] if row[4] == '3')
          with_data = sum(1 for row in optimized_rows[1:] if row[5] != '0' and row[6] != '0')
          
          print(f"📊 Statistics: High impact: {high_impact}, With data: {with_data}")
          EOF

      - name: Verify and display results
        run: |
          echo "=== VERIFICATION ==="
          echo "📁 Raw data lines: $(wc -l < forex_data_raw.csv)"
          echo "⚡ Simple data lines: $(wc -l < forex_data_simple.csv)"
          
          echo ""
          echo "=== SAMPLE OF OPTIMIZED CSV ==="
          head -5 forex_data_simple.csv

      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add forex_data_simple.csv forex_data_raw.csv
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🤖 Optimized: MQL5-compatible forex data [$(date +%Y-%m-%d)]"
            git push
            echo "✅ Changes committed successfully"
          fi
